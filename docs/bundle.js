(()=>{"use strict";var e={556:(e,t,n)=>{n.d(t,{Z:()=>c});var i=n(15),o=n.n(i),r=n(645),a=n.n(r)()(o());a.push([e.id,"html,\nbody {\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  padding: 0px;\n}\n\ncanvas {\n  -webkit-tap-highlight-color: transparent;\n  border: 1px solid;\n}\n","",{version:3,sources:["webpack://./src/css/main.css"],names:[],mappings:"AAAA;;EAEE,gBAAgB;EAChB,eAAe;EACf,WAAW;EACX,YAAY;EACZ,WAAW;EACX,YAAY;AACd;;AAEA;EACE,wCAAwC;EACxC,iBAAiB;AACnB",sourcesContent:["html,\nbody {\n  overflow: hidden;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  padding: 0px;\n}\n\ncanvas {\n  -webkit-tap-highlight-color: transparent;\n  border: 1px solid;\n}\n"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,i){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(i)for(var r=0;r<this.length;r++){var a=this[r][0];null!=a&&(o[a]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);i&&o[s[0]]||(n&&(s[2]?s[2]="".concat(n," and ").concat(s[2]):s[2]=n),t.push(s))}},t}},15:e=>{function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}e.exports=function(e){var n,i,o=(i=4,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],i=!0,o=!1,r=void 0;try{for(var a,c=e[Symbol.iterator]();!(i=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);i=!0);}catch(e){o=!0,r=e}finally{try{i||null==c.return||c.return()}finally{if(o)throw r}}return n}}(n,i)||function(e,n){if(e){if("string"==typeof e)return t(e,n);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?t(e,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),r=o[1],a=o[3];if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),l="/*# ".concat(s," */"),h=a.sources.map((function(e){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(e," */")}));return[r].concat(h).concat([l]).join("\n")}return[r].join("\n")}},118:(e,t,n)=>{n.r(t),n.d(t,{default:()=>a});var i=n(379),o=n.n(i),r=n(556);o()(r.Z,{insert:"head",singleton:!1});const a=r.Z.locals||{}},379:(e,t,n)=>{var i,o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),r=[];function a(e){for(var t=-1,n=0;n<r.length;n++)if(r[n].identifier===e){t=n;break}return t}function c(e,t){for(var n={},i=[],o=0;o<e.length;o++){var c=e[o],s=t.base?c[0]+t.base:c[0],l=n[s]||0,h="".concat(s," ").concat(l);n[s]=l+1;var d=a(h),u={css:c[1],media:c[2],sourceMap:c[3]};-1!==d?(r[d].references++,r[d].updater(u)):r.push({identifier:h,updater:g(u,t),references:1}),i.push(h)}return i}function s(e){var t=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var r=n.nc;r&&(i.nonce=r)}if(Object.keys(i).forEach((function(e){t.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var l,h=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,n,i){var o=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=h(t,o);else{var r=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(r,a[t]):e.appendChild(r)}}function u(e,t,n){var i=n.css,o=n.media,r=n.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var f=null,p=0;function g(e,t){var n,i,o;if(t.singleton){var r=p++;n=f||(f=s(t)),i=d.bind(null,n,r,!1),o=d.bind(null,n,r,!0)}else n=s(t),i=u.bind(null,n,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=c(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<n.length;i++){var o=a(n[i]);r[o].references--}for(var s=c(e,t),l=0;l<n.length;l++){var h=a(n[l]);0===r[h].references&&(r[h].updater(),r.splice(h,1))}n=s}}}},238:(e,t,n)=>{n(118),(new(n(447).Game)).loop()},332:function(e,t,n){var i=this&&this.__createBinding||(Object.create?function(e,t,n,i){void 0===i&&(i=n),Object.defineProperty(e,i,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,i){void 0===i&&(i=n),e[i]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||i(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(206),t)},206:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Vector=void 0;var n=function(){function e(e,t,n){this.d=[e,t,n]}return e.prototype.x=function(){return Number.isFinite(this.d[0])?this.d[0]:0},e.prototype.y=function(){return Number.isFinite(this.d[1])?this.d[1]:0},e.prototype.z=function(){return Number.isFinite(this.d[2])?this.d[2]:0},e.prototype.add=function(t){return new e(this.d[0]+t.d[0],this.d[1]+t.d[1],this.d[2]+t.d[2])},e.prototype.sub=function(t){return new e(this.d[0]-t.d[0],this.d[1]-t.d[1],this.d[2]-t.d[2])},e.prototype.multiplyScalar=function(t){return new e(this.d[0]*t,this.d[1]*t,this.d[2]*t)},e.prototype.dotProduct=function(e){return this.d[0]*e.d[0]+this.d[1]*e.d[1]+this.d[2]*e.d[2]},e.prototype.crossProduct=function(t){return new e(this.d[1]*t.d[2]-this.d[2]*t.d[1],this.d[2]*t.d[0]-this.d[0]*t.d[2],this.d[0]*t.d[1]-this.d[1]*t.d[0])},e.prototype.magnitude=function(){return Math.sqrt(this.d[0]*this.d[0]+this.d[1]*this.d[1]+this.d[2]*this.d[2])},e.prototype.angleRadians=function(e){var t=this.dotProduct(e);return t/=this.magnitude()*e.magnitude(),Math.abs(Math.acos(t))},e.prototype.unit=function(){var e=this.magnitude();return this.multiplyScalar(1/e)},e.prototype.valueOf=function(){return this.d},e.prototype.toObject=function(){return{x:this.x(),y:this.y(),z:this.z()}},e.prototype.perpendicular=function(e){return this.crossProduct(e).unit()},e.prototype.set=function(e){this.d[0]=e.d[0],this.d[1]=e.d[1],this.d[2]=e.d[2]},e.prototype.clone=function(){return new e(this.x(),this.y(),this.z())},e}();t.Vector=n},938:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.config=void 0,t.config={width:1280,height:720}},458:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Entity=t.EntityType=void 0;var i,o=n(206);!function(e){e[e.PointCharge=0]="PointCharge",e[e.Wall=1]="Wall",e[e.Goal=2]="Goal"}(i=t.EntityType||(t.EntityType={}));t.Entity=function(){this.mass=1,this.charge=0,this.position=new o.Vector(0,0,0),this.velocity=new o.Vector(0,0,0),this.type=i.PointCharge,this.isSelected=!0}},676:function(e,t,n){var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Goal=void 0;var r=n(458),a=function(e){function t(t,n){var i=e.call(this)||this;return i.charge=0,i.mass=0,i.position=t,i.size=n,i.type=r.EntityType.Goal,i.neededStreamCount=1,i.streamCount=0,i}return o(t,e),t.prototype.contains=function(e){return e.x()>this.position.x()&&e.x()<this.position.x()+this.size.x()&&e.y()>this.position.y()&&e.y()<this.position.y()+this.size.y()},t}(r.Entity);t.Goal=a},411:function(e,t,n){var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.PointCharge=void 0;var r=n(206),a=function(e){function t(t){var n=e.call(this)||this;return n.charge=1e3,n.mass=1,n.position=t,n.velocity=new r.Vector(0,0,0),n.radius=5,n}return o(t,e),t.prototype.contains=function(e){return e.sub(this.position).magnitude()<this.radius},t}(n(458).Entity);t.PointCharge=a},652:function(e,t,n){var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Stream=void 0;var r=n(206),a=function(e){function t(t){var n=e.call(this)||this;return n.charge=1e3,n.mass=1,n.position=t,n.velocity=new r.Vector(0,0,0),n.radius=5,n.path=[],n}return o(t,e),t.prototype.contains=function(e){return e.sub(this.position).magnitude()<this.radius},t}(n(458).Entity);t.Stream=a},810:function(e,t,n){var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.Wall=void 0;var r=n(458),a=function(e){function t(t,n){var i=e.call(this)||this;return i.charge=0,i.mass=0,i.position=t,i.size=n,i.type=r.EntityType.Wall,i}return o(t,e),t.prototype.contains=function(e){return e.x()>this.position.x()&&e.x()<this.position.x()+this.size.x()&&e.y()>this.position.y()&&e.y()<this.position.y()+this.size.y()},t}(r.Entity);t.Wall=a},447:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Game=void 0;var i=n(395),o=n(681),r=n(938),a=n(893),c=n(602),s=function(){function e(){var e=document.getElementById("canvas");e.width=r.config.width,e.height=r.config.height,this.ctx=e.getContext("2d"),this.renderer=new o.Renderer(this.ctx),this.level=i.loadLevel(1),this.inputManager=new a.InputManager(e,this),this.scene=new c.LevelScene,this.sceneName=c.SceneName.Level,this.switchScene(c.SceneName.MainMenu)}return e.prototype.handleEvent=function(e,t){this.scene.handleEvent(e,t,this)},e.prototype.loop=function(){var e=this;this.scene.handleCollisions(this),this.scene.render(this),window.requestAnimationFrame((function(){return e.loop()}))},e.prototype.switchLevel=function(e){this.scene.sceneState=c.SceneState.LevelWin,this.level=i.loadLevel(e)},e.prototype.switchScene=function(e){switch(this.sceneName=e,this.sceneName){case c.SceneName.Level:this.scene=new c.LevelScene,this.scene.init(this);break;case c.SceneName.MainMenu:this.scene=new c.MainMenuScene,this.scene.init(this);break;case c.SceneName.End:this.scene=new c.EndScene,this.scene.init(this)}},e}();t.Game=s},893:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InputManager=void 0;var i=n(332);t.InputManager=function(e,t){var n=this;this.mousePosition=new i.Vector(-1e3,-1e3,-1e3),this.eventMap=new Map,e.addEventListener("click",(function(e){n.mousePosition=new i.Vector(e.offsetX,e.offsetY,0),t.handleEvent("click",e)})),e.addEventListener("mousemove",(function(e){n.mousePosition=new i.Vector(e.offsetX,e.offsetY,0),t.handleEvent("mousemove",e)})),e.addEventListener("mousedown",(function(e){n.mousePosition=new i.Vector(e.offsetX,e.offsetY,0),t.handleEvent("mousedown",e)})),e.addEventListener("mouseup",(function(e){n.mousePosition=new i.Vector(e.offsetX,e.offsetY,0),t.handleEvent("mouseup",e)})),e.addEventListener("mouseleave",(function(e){n.mousePosition=new i.Vector(-1e3,-1e3,-1e3),t.handleEvent("mouseleave",e)}))}},395:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.loadLevel=t.Level=void 0;var i=n(206),o=n(938),r=n(411),a=n(810),c=n(676),s=n(652),l=function(){function e(e,t,n){this.id=e,this.entities=t,this.goals=n,this.streams=[],this.helpText="",this.addStream(new i.Vector(10,o.config.height/2,0))}return e.prototype.addStream=function(e){var t=new s.Stream(e);t.charge=-1e3,t.mass=10,t.velocity=new i.Vector(50,0,0),t.path=[],this.streams.push(t)},e.prototype.addPoint=function(e){this.entities.push(new r.PointCharge(e))},e.prototype.addWall=function(e,t){this.entities.push(new a.Wall(e,t))},e.prototype.addGoal=function(e,t){this.goals.push(new c.Goal(e,t))},e}();t.Level=l,t.loadLevel=function(e){switch(e){case 1:return(t=new l(1,[],[new c.Goal(new i.Vector(o.config.width-20,100,0),new i.Vector(10,50,0))])).helpText="Click 'Add Point' to bend the plasma beam",t;case 2:return(t=new l(2,[new a.Wall(new i.Vector(o.config.width/2,20,0),new i.Vector(20,3*o.config.height/4,0))],[new c.Goal(new i.Vector(o.config.width-20,o.config.height-100,0),new i.Vector(10,50,0))])).helpText="Bend the plasma beam around the wall",t;case 3:return(t=new l(3,[],[])).addWall(new i.Vector(o.config.width/4,0,0),new i.Vector(20,o.config.height/3,0)),t.addWall(new i.Vector(o.config.width/4,o.config.height/3+50,0),new i.Vector(20,2*o.config.height/3,0)),t.addWall(new i.Vector(o.config.width/2,0,0),new i.Vector(20,2*o.config.height/3,0)),t.addWall(new i.Vector(o.config.width/2,2*o.config.height/3+50,0),new i.Vector(20,o.config.height/3,0)),t.addWall(new i.Vector(3*o.config.width/4,0,0),new i.Vector(20,o.config.height/3,0)),t.addWall(new i.Vector(3*o.config.width/4,o.config.height/3+50,0),new i.Vector(20,2*o.config.height/3,0)),t.addGoal(new i.Vector(o.config.width-20,o.config.height/2-50,0),new i.Vector(10,100,0)),t.helpText="You can drag the charges",t;case 4:return(t=new l(4,[],[])).streams=[],t.addStream(new i.Vector(10,o.config.height/3,0)),t.addStream(new i.Vector(10,2*o.config.height/3,0)),t.addWall(new i.Vector(o.config.width/2,1,0),new i.Vector(20,o.config.height/3+75,0)),t.addWall(new i.Vector(o.config.width/2,2*o.config.height/3-75,0),new i.Vector(20,o.config.height/2,0)),t.addGoal(new i.Vector(o.config.width-20,o.config.height/2-50,0),new i.Vector(10,100,0)),t.goals[0].neededStreamCount=2,t.helpText="Point both beams towards the exit",t;case 5:var t;return(t=new l(5,[],[])).streams=[],t.addStream(new i.Vector(10,o.config.height/3,0)),t.addStream(new i.Vector(10,2*o.config.height/3,0)),t.addWall(new i.Vector(o.config.width/4,0,0),new i.Vector(20,o.config.height/3+5,0)),t.addWall(new i.Vector(o.config.width/4,o.config.height/3+50,0),new i.Vector(20,2*o.config.height/3,0)),t.addWall(new i.Vector(o.config.width/2,0,0),new i.Vector(20,2*o.config.height/3,0)),t.addWall(new i.Vector(o.config.width/2,2*o.config.height/3+50,0),new i.Vector(20,o.config.height/3,0)),t.addWall(new i.Vector(3*o.config.width/4,0,0),new i.Vector(20,o.config.height/3,0)),t.addWall(new i.Vector(3*o.config.width/4,o.config.height/3+50,0),new i.Vector(20,2*o.config.height/3,0)),t.addGoal(new i.Vector(o.config.width-20,o.config.height/2-50,0),new i.Vector(10,100,0)),t.goals[0].neededStreamCount=2,t.helpText="Good luck.",t}return console.error("Level not complete"),new l(69,[],[])}},651:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.calculateStreamPath=t.calculateTotalFieldAt=void 0;var i=n(332),o=n(411),r=n(458),a=n(602),c=n(938);function s(e,t){for(var n=new i.Vector(0,0,0),c=0,s=t.level.entities;c<s.length;c++){var h=s[c];h.type==r.EntityType.PointCharge?n=n.add(l(e,h)):h.type==r.EntityType.Wall||h.type==r.EntityType.Goal||console.log("unknown entity type")}return t.sceneName==a.SceneName.Level&&t.scene.sceneState==a.SceneState.LevelAddingCharge&&(n=n.add(l(e,new o.PointCharge(t.inputManager.mousePosition)))),n}function l(e,t){var n=e.sub(t.position).magnitude();if(n<15)return new i.Vector(0,0,0);var o=t.charge/Math.pow(n,2);return e.sub(t.position).unit().multiplyScalar(o)}t.calculateTotalFieldAt=s,t.calculateStreamPath=function(e,t,n){for(var i=[],o=t.position.clone(),r=t.velocity.clone(),a=0;a<n;a++){var l=s(o,e).multiplyScalar(t.charge).multiplyScalar(1/t.mass);if(r.set(r.add(l.multiplyScalar(.005))),o.set(o.add(r.multiplyScalar(.005))),i.push(o.clone()),o.x()<0||o.x()>c.config.width||o.y()<0||o.y()>c.config.height)return i}return i}},820:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Button=void 0;var n=function(){function e(e,t,n,i){this.action=i,this.text=e,this.size=n,this.position=t}return e.prototype.contains=function(e){return e.x()>this.position.x()&&e.x()<this.position.x()+this.size.x()&&e.y()>this.position.y()&&e.y()<this.position.y()+this.size.y()},e}();t.Button=n},681:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Renderer=t.TestChargeSteps=void 0;var i=n(332),o=n(938),r=n(651),a=n(458);t.TestChargeSteps=1e4;var c=function(){function e(e){this.testChargePathBallOffset=0,this.ctx=e}return e.prototype.clear=function(){this.ctx.clearRect(0,0,o.config.width,o.config.height)},e.prototype.drawEntities=function(e){for(var t=0,n=e.level.entities;t<n.length;t++){var i=n[t];i.type==a.EntityType.PointCharge&&this.drawPointCharge(i.position,i.charge,i.isSelected),i.type==a.EntityType.Wall&&this.drawWall(i)}},e.prototype.drawStream=function(e){this.drawPointCharge(e.position,e.charge,!1);var t=e.path.length/500,n=e.path.length;e.charge>0?this.ctx.strokeStyle="#FF0000":this.ctx.strokeStyle="#0000FF",this.ctx.beginPath();for(var i=0,o=e.path;i<o.length;i++){var r=o[i];this.ctx.lineTo(r.x(),r.y())}this.ctx.stroke();for(var a=0;a<t;a++){var c=500*a+this.testChargePathBallOffset;if(!(c>=n)){var s=e.path[c];this.drawPointCharge(s,e.charge,!1)}}this.testChargePathBallOffset=(this.testChargePathBallOffset+10)%500},e.prototype.drawButton=function(e,t){this.ctx.fillStyle="blue",this.ctx.fillRect(e.position.x(),e.position.y(),e.size.x(),e.size.y()),this.ctx.font="24px Comic Sans MS",this.ctx.fillStyle="red",this.ctx.textAlign="center",this.ctx.fillText(e.text,e.position.x()+e.size.x()/2,e.position.y()+e.size.y()/2+5)},e.prototype.drawText=function(e,t,n){this.ctx.font=t.toString()+"px Comic Sans MS",this.ctx.fillStyle="red",this.ctx.textAlign="left",this.ctx.fillText(e,n.x(),n.y())},e.prototype.drawLevel=function(e){this.ctx.font="24px Comic Sans MS",this.ctx.fillStyle="red",this.ctx.textAlign="left",this.ctx.fillText("Level: "+e.level.id.toString()+" / 5",20,20)},e.prototype.drawWall=function(e){this.ctx.fillStyle="gray",this.ctx.fillRect(e.position.x(),e.position.y(),e.size.x(),e.size.y())},e.prototype.drawGoal=function(e){e.isSelected?this.ctx.fillStyle="#0000FF":this.ctx.fillStyle="#FF0000",this.ctx.fillRect(e.position.x(),e.position.y(),e.size.x(),e.size.y())},e.prototype.drawField=function(e){for(var t=20;t<o.config.width;t+=20)for(var n=20;n<o.config.height;n+=20){var a=r.calculateTotalFieldAt(new i.Vector(t,n,0),e),c=this.vectorIndicatorLength(a);c<.1||(a=a.unit().multiplyScalar(c),this.ctx.strokeStyle="#FF0000",this.ctx.beginPath(),this.ctx.moveTo(t,n),this.ctx.lineTo(t+a.x(),n+a.y()),this.ctx.stroke())}},e.prototype.vectorIndicatorLength=function(e){var t=20*e.magnitude();return t>=19?19:t},e.prototype.drawPointCharge=function(e,t,n){this.ctx.fillStyle=t>0?"#FF0000":"#0000FF",this.ctx.beginPath(),this.ctx.arc(e.x(),e.y(),5,0,2*Math.PI),this.ctx.fill()},e}();t.Renderer=c},602:function(e,t,n){var i,o=this&&this.__extends||(i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.EndScene=t.MainMenuScene=t.LevelScene=t.Scene=t.SceneState=t.SceneName=void 0;var r,a,c=n(332),s=n(938),l=n(458),h=n(651),d=n(820),u=n(681);!function(e){e[e.SplashScreen=0]="SplashScreen",e[e.MainMenu=1]="MainMenu",e[e.LevelSelect=2]="LevelSelect",e[e.Level=3]="Level",e[e.Leaderboard=4]="Leaderboard",e[e.End=5]="End"}(r=t.SceneName||(t.SceneName={})),function(e){e[e.SceneInit=0]="SceneInit",e[e.LevelAddingCharge=1]="LevelAddingCharge",e[e.LevelMovingCharge=2]="LevelMovingCharge",e[e.LevelWin=3]="LevelWin"}(a=t.SceneState||(t.SceneState={}));var f=function(){this.sceneState=a.SceneInit,this.buttons=[],this.isRecentWin=!1};t.Scene=f;var p=function(e){function t(){var t=e.call(this)||this;return t.selectedEntity={},t}return o(t,e),t.prototype.handleEvent=function(e,t,n){var i=new c.Vector(t.offsetX,t.offsetY,0);switch(e){case"click":console.log("click");for(var o=0,r=this.buttons;o<r.length;o++){var s=r[o];if(s.contains(i))return void s.action()}if(this.sceneState==a.LevelAddingCharge)return n.level.addPoint(n.inputManager.mousePosition),this.sceneState=a.SceneInit,void this.clearSelected(n);break;case"mousedown":console.log("mousedown");for(var l=0,h=n.level.entities;l<h.length;l++)if((f=h[l]).contains(i))return this.selectedEntity=f,f.isSelected=!0,void(this.sceneState=a.LevelMovingCharge);this.clearSelected(n);break;case"mousemove":if(this.sceneState==a.LevelMovingCharge)for(var d=0,u=n.level.entities;d<u.length;d++){var f;(f=u[d]).isSelected&&(f.position=i)}break;case"mouseup":console.log("mouseup"),this.sceneState==a.LevelMovingCharge&&(this.clearSelected(n),this.sceneState=a.SceneInit)}},t.prototype.clearSelected=function(e){for(var t=0,n=e.level.entities;t<n.length;t++)n[t].isSelected=!1},t.prototype.init=function(e){var t=this;this.buttons.push(new d.Button("Add Point",new c.Vector(20,s.config.height-75,0),new c.Vector(150,60,0),(function(){t.sceneState==a.SceneInit?t.sceneState=a.LevelAddingCharge:console.log("in a wierd state already?")})))},t.prototype.handleCollisions=function(e){for(var t=0,n=e.level.goals;t<n.length;t++)(y=n[t]).isSelected=!1,y.streamCount=0;for(var i=0;i<e.level.streams.length;i++){e.level.streams[i].path=h.calculateStreamPath(e,e.level.streams[i],u.TestChargeSteps);for(var o=!1,c=0;c<e.level.streams[i].path.length;c++){for(var s=e.level.streams[i].path[c],d=0,f=e.level.entities;d<f.length;d++){var p=f[d];p.type==l.EntityType.Wall&&p.contains(s)&&(e.level.streams[i].path=e.level.streams[i].path.slice(0,c),o=!0)}if(o)break;for(var g=0,v=e.level.goals;g<v.length;g++){var y;(y=v[g]).contains(s)&&(e.level.streams[i].path=e.level.streams[i].path.slice(0,c),y.streamCount+=1,y.streamCount>=y.neededStreamCount&&(y.isSelected=!0),o=!0)}if(o)break}}e.level.goals.length>0&&e.level.goals.every((function(e){return e.isSelected}))?(e.scene.sceneState==a.LevelWin||e.scene.isRecentWin||setTimeout((function(){e.scene.isRecentWin=!1,5!=e.level.id?(e.switchLevel(e.level.id+1),e.scene.sceneState=a.SceneInit):e.switchScene(r.End)}),1e3),e.scene.sceneState==a.LevelAddingCharge&&(e.level.addPoint(e.inputManager.mousePosition),this.sceneState=a.SceneInit),this.clearSelected(e),e.scene.sceneState=a.LevelWin,e.scene.isRecentWin=!0):e.scene.isRecentWin=!1},t.prototype.render=function(e){e.renderer.clear(),e.renderer.drawEntities(e),e.renderer.drawField(e),e.renderer.drawLevel(e);for(var t=0,n=e.level.streams;t<n.length;t++){var i=n[t];e.renderer.drawStream(i)}for(var o=0,r=e.level.goals;o<r.length;o++){var l=r[o];e.renderer.drawGoal(l)}this.sceneState==a.LevelAddingCharge&&e.renderer.drawPointCharge(e.inputManager.mousePosition,1,!0);for(var h=0,d=this.buttons;h<d.length;h++){var u=d[h];e.renderer.drawButton(u,e)}""!=e.level.helpText&&e.renderer.drawText(e.level.helpText,24,new c.Vector(200,s.config.height-50,0)),e.scene.sceneState==a.LevelWin&&e.renderer.drawText("Win",256,new c.Vector(s.config.width/4,s.config.height/2,0))},t}(f);t.LevelScene=p;var g=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.handleEvent=function(e,t,n){var i=new c.Vector(t.offsetX,t.offsetY,0);switch(e){case"click":for(var o=0,r=this.buttons;o<r.length;o++){var a=r[o];if(a.contains(i))return void a.action()}}},t.prototype.init=function(e){this.buttons.push(new d.Button("Play",new c.Vector(s.config.width/2-70,200,0),new c.Vector(150,60,0),(function(){e.switchScene(r.Level)}))),this.buttons.push(new d.Button("About",new c.Vector(s.config.width/2-70,300,0),new c.Vector(150,60,0),(function(){window.location.href="https://blog.c0nrad.io/posts/plasma-leak/"}))),this.buttons.push(new d.Button("Quit",new c.Vector(s.config.width/2-70,400,0),new c.Vector(150,60,0),(function(){window.location.href="https://www.youtube.com/watch?v=dQw4w9WgXcQ"})))},t.prototype.render=function(e){e.renderer.clear();for(var t=0,n=this.buttons;t<n.length;t++){var i=n[t];e.renderer.drawButton(i,e)}e.renderer.drawText("Plasma Leak",72,new c.Vector(s.config.width/2-175,100,0)),e.renderer.drawText("A rogue plasma beam is wrecking havoc inside our spacecraft!",24,new c.Vector(100,s.config.height-150,0)),e.renderer.drawText("Use electrically charged particles to bend the plasma beam to safety.",24,new c.Vector(100,s.config.height-100,0))},t.prototype.handleCollisions=function(e){},t}(f);t.MainMenuScene=g;var v=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.handleEvent=function(e,t,n){var i=new c.Vector(t.offsetX,t.offsetY,0);switch(e){case"click":for(var o=0,r=this.buttons;o<r.length;o++){var a=r[o];if(a.contains(i))return void a.action()}}},t.prototype.init=function(e){this.buttons.push(new d.Button("Play",new c.Vector(s.config.width/2-70,200,0),new c.Vector(150,60,0),(function(){e.switchScene(r.Level)})))},t.prototype.render=function(e){e.renderer.clear(),e.renderer.drawText("Plasma Leak",72,new c.Vector(s.config.width/2-175,100,0)),e.renderer.drawText("Win",256,new c.Vector(s.config.width/4,s.config.height/2,0)),e.renderer.drawText("You won! I didn't think anyone would get this far, especially you. But congrats anyways.",24,new c.Vector(100,s.config.height-150,0)),e.renderer.drawText("If you liked it, please let me know! c0nrad@c0nrad.io (those are zero's).",24,new c.Vector(100,s.config.height-100,0)),e.renderer.drawText(" If you hated it, please let me know at spam@gmail.com",24,new c.Vector(100,s.config.height-50,0))},t.prototype.handleCollisions=function(e){},t}(f);t.EndScene=v}},t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={id:i,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var i in t)n.o(t,i)&&!n.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(238)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,